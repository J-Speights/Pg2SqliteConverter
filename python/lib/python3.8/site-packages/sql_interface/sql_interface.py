from enum import Enum
from typing import List, Any
from functools import partial
from dataclasses import dataclass, field
from pathlib import Path

from lib.utils import execute_query, read_sql_query_from_path


class QueryType(Enum):
    ReturnAll = "return_all"
    SimpleWrite = "simple_write"
    ComplexWrite = "complex_write"


@dataclass
class SqlQuery:
    parameters: List[Any]
    call_type: QueryType
    query_string: str = None
    query_path: Path = None
    _query_statement: str = field(init=False)

    def __post_init__(self) -> None:
        if self.query_path and self.query_string:
            raise ValueError(
                "Only query_path OR query_string can be supplied, not both."
            )

        if self.query_path:
            self._query_statement = read_sql_query_from_path(self.query_path)
        elif self.query_string:
            self._query_statement = self.query_string

        if not self._query_statement:
            raise ValueError("Must supply one of query_path or query_string.")

    @property
    def query_statement(self):
        if self._query_statement is None:
            raise ValueError("Either query_path or query must be provided.")
        return self._query_statement

    def run_query(self):
        status_code = 200
        results = ""
        status_code, results = execute_query(
            query_statement=self.query_statement,
            parameters=self.parameters,
            call_type=self.call_type.value,
        )
        if status_code == 200:
            results = results[0]
        return status_code, results


@dataclass
class MultiSqlQuery:
    parameters: List[List[Any]]
    call_type: QueryType = None
    call_types: List[QueryType] = None
    query_strings: List[str] = field(default_factory=list)
    query_paths: List[Path] = field(default_factory=list)
    _query_statements: List[str] = field(init=False, default_factory=list)

    def __post_init__(self) -> None:
        if self.query_paths and self.query_strings:
            raise ValueError("Only query_paths or strings can be supplied, not both")
        if self.query_paths:
            self._query_statements = [
                read_sql_query_from_path(each) for each in self.query_paths
            ]
        elif self.query_strings:
            self._query_statements = self.query_strings

        if not self._query_statements:
            raise ValueError("Must supply one of query_paths or query_strings")

        if self.call_type is None and self.call_types is None:
            raise ValueError("Must supply one of call_type or call_types.")
        if self.call_type and self.call_types:
            raise ValueError(
                "Can only supply one of call_type or call_types, not both."
            )
        if self.call_types and not len(self._query_statements) == len(
            self.parameters
        ) == len(self.call_types):
            raise ValueError(
                "call_types, parameters, and query_statements must be same length."
            )

    @property
    def query_statements(self):
        if not self._query_statements:
            raise ValueError("Either query_paths or query_strings must be provided.")
        return self._query_statements

    def run_queries(self):
        status_code = 200
        results = ""

        if self.call_type:
            call_types = [self.call_type.value] * len(self.query_statements)
        else:
            call_types = [ct.value for ct in self.call_types]

        status_code, results = execute_query(
            query_statement=self.query_statements,
            parameters=self.parameters,
            call_type=call_types,
        )
        return status_code, results


ReturnAllQuery = partial(
    SqlQuery,
    call_type=QueryType.ReturnAll,
)

SimpleWriteQuery = partial(
    SqlQuery,
    call_type=QueryType.SimpleWrite,
)

ComplexWriteQuery = partial(
    SqlQuery,
    call_type=QueryType.ComplexWrite,
)

MultiReturnAllQuery = partial(
    MultiSqlQuery,
    call_type=QueryType.ReturnAll,
)

MultiSimpleWriteQuery = partial(
    MultiSqlQuery,
    call_type=QueryType.SimpleWrite,
)

MultiComplexWriteQuery = partial(
    SqlQuery,
    call_type=QueryType.ComplexWrite,
)
