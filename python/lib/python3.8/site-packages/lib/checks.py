import sys
import logging

from typing import Dict, Tuple
from lib.utils import check_key


logger = logging.getLogger()
logger.setLevel(logging.INFO)


def check_populate_required_keys(
    event_dict: Dict, required_keys: Dict, max_key_length: int
) -> Tuple[int, str, Dict]:
    """
    checks required keys against event dictionary
    and populates the required_keys values.
    """
    status_code = 200
    results = "OK"

    try:
        for each in required_keys:
            if isinstance(event_dict[each], (int, float, bool)):
                required_keys[each] = event_dict[each]
                continue
            as_string = str(event_dict[each])
            if each in format(event_dict) and status_code == 200:
                status_code, results = check_key(as_string, max_key_length)
                if status_code == 200:
                    required_keys[each] = event_dict[each]
                else:
                    results = f"Required Key {each} failed key check: {results}"
                    break
            else:
                status_code = 406
                results = f"Required key {each} Missing"
                logger.warning(results)
    except:
        status_code = 400
        results = f"Fatal error in checking required keys {event_dict}"
        logger.error(sys.exc_info())

    return (status_code, results, required_keys)


def check_populate_optional_parameters(
    event_dict: Dict, optional_parameters: Dict, max_key_length: int
) -> Tuple[int, str, Dict]:
    """
    checks optional_parameters against event dictionary
    and populates the optional_parameters values.
    """
    status_code = 200
    results = "OK"

    for each in optional_parameters:
        try:
            if not each in event_dict:
                continue
            if isinstance(event_dict[each], (int, float, bool)):
                optional_parameters[each] = event_dict[each]
                continue
            as_string = str(event_dict[each])

            if each in event_dict and status_code == 200:
                status_code, results = check_key(as_string, max_key_length)
                if status_code != 200:
                    logger.warning(
                        f"{each} failed key checks with status code {status_code} and results {results}"
                    )
                    return (status_code, results, optional_parameters)
                optional_parameters[each] = event_dict[each]
            else:
                status_code = 406
                results = f"Optional Parameter {each} failed key checks"
                logger.warning(results)

        except Exception as e:
            status_code = 400
            results = f"Fatal error in checking optional parameters: {str(e)}"
            logger.error(sys.exc_info())
            return (status_code, results, optional_parameters)

    return (status_code, results, optional_parameters)
